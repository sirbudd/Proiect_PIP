package com.arduino.ui;

// Store Constants

import com.arduino.Constants;
import com.sun.istack.internal.NotNull;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

// MQTT Links
// GUI

public class LEDControllerUI extends JDialog {
    private JPanel contentPane;
    private JButton ledON;
    private JButton ledOff;
    private JLabel message_text;

    // This is the MQTT Client Required
    // For Communication with our Arduino
    private MqttClient mqtt_client;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public LEDControllerUI(@NotNull JFrame parent, @NotNull MqttClient p_mqtt_client) throws Exception {

        super(parent);
        this.mqtt_client = p_mqtt_client;

        setContentPane(contentPane);
        setModal(true);

        ledON.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
                if (mqtt_client.isConnected()) {
                    try {
                        final String content = "LED_ON";
                        final MqttMessage led_on_message = new MqttMessage(content.getBytes());
                        mqtt_client.publish(Constants.MQTT_TOPIC, led_on_message);
                        message_text.setText("LED On Sent");
                    } catch (MqttException me) {
                        message_text.setText("Exception Occured" + me.getMessage());
                    }
                } else {
                    message_text.setText("MQTT Client is Not yet Connected");
                }
            }
        });

        ledOff.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (mqtt_client.isConnected()) {
                    try {
                        final String content = "LED_OFF";
                        final MqttMessage led_off_message = new MqttMessage(content.getBytes());
                        mqtt_client.publish(Constants.MQTT_TOPIC, led_off_message);
                        message_text.setText("LED Off Sent");
                    } catch (MqttException me) {
                        message_text.setText("Exception Occured" + me.getMessage());
                    }
                } else {
                    message_text.setText("MQTT Client is Not yet Connected");
                }
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onCancel() {
        if (mqtt_client.isConnected()) {
            try {
                final String content = "LED_OFF";
                final MqttMessage led_off_message = new MqttMessage(content.getBytes());
                mqtt_client.publish(Constants.MQTT_TOPIC, led_off_message);
            } catch (MqttException me) {
            }
        }

        // add your code here if necessary
        dispose();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMaximumSize(new Dimension(340, 140));
        contentPane.setMinimumSize(new Dimension(140, 140));
        contentPane.setPreferredSize(new Dimension(270, 260));
        contentPane.setVisible(true);
        final JLabel label1 = new JLabel();
        label1.setText("SELECT LED On or Off");
        contentPane.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ledON = new JButton();
        ledON.setText("LED On");
        panel1.add(ledON, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ledOff = new JButton();
        ledOff.setText("LED Off");
        panel1.add(ledOff, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        message_text = new JLabel();
        message_text.setText("");
        contentPane.add(message_text, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
